| {{#if !persisted }}
| {{> new_reminder_template }}
| {{else}}
| {{> show_reminder_template }}
| {{/if}}

script#show_reminder_template(type = 'text/ractive')
  .reminder.row.editable_container(id = "reminder_editable{{id}}", 'as-popover_edit'='id')
    .col-md-1.tight.reminder_type.form-group(class = '{{#reminder_type_error}}has-error{{/}}', style = "width:10%", 'data-toggle' = 'edit', 'data-id' = '{{id}}', 'data-attribute'='reminder_type')
      .fade.no_edit.in
        span
          | {{ reminder_type }}
      .fade.edit(style = "height:140px;")
        | {{> select_type }}
        span.help-block(style = "font-size:0.8em; padding-left:4px; position:relative; top:-4px; width:100%; background-color:#fff")
          | {{ t.reminder_type_error_message }}
    .col-md-1.tight.next.form-group(style = "width:18%", 'data-toggle'='edit', 'data-id'='{{id}}', 'data-attribute'='["start_month","start_day","start_year"]')
      .fade.no_edit.in
        span 
          | {{ next_date }}
      .fade.edit(style = "height:140px;")
        | {{> select_month }}
        | {{> select_day }}
        | {{> select_year }}
    .col-md-1.tight.previous(style = "width:9%")
      | {{ previous_date }}
    .col-md-6.tight.text.form-group(class = '{{#text_error}}has-error{{/}}', style = "width:40%", 'data-toggle'='edit', 'data-id'='{{id}}', 'data-attribute'='text')
      div
        .fade.no_edit.in
          span 
            | {{text}}
        .fade.edit(style = "height:140px;")
          textarea#reminder_text.form-control(name = 'reminder[text]', cols=78, rows=4, value = '{{text}}', 'on-keydown'="@this.remove_errors('text')")
          span.help-block(style = "font-size:0.8em; padding-left:4px; position:relative; top:-8px; width:100%; background-color:#fff")
            | {{ t.reminder_text_error_message }}
    .col-md-1.tight.recipient.form-group(class = '{{#user_id_error}}has-error{{/}}', style = "width:13%", 'data-toggle'='edit', 'data-id'='{{id}}', 'data-attribute'='user_id')
      .fade.no_edit.in
        .name(style = "margin-bottom: 0px;") 
          | {{ recipient.first_last_name }}
      .fade.edit(style = "height:140px;")
        | {{> select_user }}
        span.help-block(style = "font-size:0.8em; padding-left:4px; position:relative; top:-6px; width:100%; background-color:#fff")
          | {{ t.reminder_recipient_error_message }}
    .col-md-1.icon.tight(style = "text-align:center; font-size:14px; height:20px; width:3%", 'data-toggle' = 'edit')
      .fade.edit
        i.fa.fa-remove.fa-lg#edit_cancel(style = "position:relative;")
    .col-md-1.icon(style = "text-align:center; font-size:14px; width:3%", 'data-toggle' = 'edit')
      .fade.edit
        i.fa.fa-check.fa-lg#edit_save
      .fade.no_edit.in(style = "left:-14px;")
        i.fa.fa-pencil-square-o.fa-lg#edit_start
    .col-md-1(style = "text-align:center; font-size:14px; width:3%;")
      i.fa.fa-trash-o.fa-lg#delete_reminder('on-click' = '@this.show_confirm_delete_modal()', :style = "position:relative; left:-12px; top:-2px;")

script#select_user(type='text/ractive').
  <select class="form-control" style="width:24%" name="reminder[user_id]" id="reminder_user_id">
    <option value="" selected="">Please select a recipient</option>
    <option value="33">Faso Aishath</option>
    <option value="15">Daren Auer</option>
    <option value="8">Abdiel Aufderhar</option>
    <option value="7">Melvina Bartell</option>
    <option value="24">Ash Bowe</option>
    <option value="5">Juana Breitenberg</option>
    <option value="10">Jalen Collins</option>
    <option value="9">Alfreda Cummerata</option>
    <option value="31">pip Dargan</option>
    <option value="3">Sabryna Dooley</option>
    <option value="2">Delphia Eichmann</option>
    <option value="30">Kieren Fitzpatrick</option>
    <option value="13">August Franecki</option>
    <option value="6">Christelle Hegmann</option>
    <option value="17">Sabrina Hettinger</option>
    <option value="11">Michale Kessler</option>
    <option value="29">Mohamed Kheir</option>
    <option value="18">Orville Koepp</option>
    <option value="27">Jia Liu</option>
    <option value="28">Dip Magar</option>
    <option value="26">Chitralekha Massey</option>
    <option value="16">Estella Mills</option>
    <option value="19">Daniella Morissette</option>
    <option value="23">Les Nightingill</option>
    <option value="21">Laury Okuneva</option>
    <option value="1">Marcus Ratke</option>
    <option value="14">Khalil Rau</option>
    <option value="12">Roma Rowe</option>
    <option value="4">Lue Senger</option>
    <option value="32">Kate Turner-Mann</option>
    <option value="20">Daphne Will</option>
    <option value="25">Neels van der Merwe</option>
  </select>


script#select_type(type='text/ractive').
  <select class="form-control" style="width:31%" name="reminder[reminder_type]" id="reminder_reminder_type">
    <option value="" selected="">select type</option>
    <option value="one-time">one-time</option>
    <option value="daily">daily</option>
    <option value="weekly">weekly</option>
    <option value="monthly">monthly</option>
    <option value="quarterly">quarterly</option>
    <option value="semi-annual">semi-annual</option>
    <option value="annual">annual</option>
  </select>

script#select_year(type='text/ractive').
  <select id="reminder_start_date_1i" name="reminder[start_date(1i)]" class="form-control">
    <option value="2017">2017</option>
    <option value="2018">2018</option>
    <option value="2019">2019</option>
    <option value="2020">2020</option>
    <option value="2021">2021</option>
    <option value="2022">2022</option>
  </select>

script#select_month(type='text/ractive').
  <select id="reminder_start_date_2i" name="reminder[start_date(2i)]" class="form-control">
    <option value="1">January</option>
    <option value="2">February</option>
    <option value="3">March</option>
    <option value="4">April</option>
    <option value="5">May</option>
    <option value="6">June</option>
    <option value="7">July</option>
    <option value="8">August</option>
    <option value="9">September</option>
    <option value="10" selected="">October</option>
    <option value="11">November</option>
    <option value="12">December</option>
  </select>

script#select_day(type='text/ractive').
  <select id="reminder_start_date_3i" name="reminder[start_date(3i)]" class="form-control">
    <option value="1">1</option>
    <option value="2">2</option>
    <option value="3">3</option>
    <option value="4">4</option>
    <option value="5">5</option>
    <option value="6">6</option>
    <option value="7">7</option>
    <option value="8">8</option>
    <option value="9">9</option>
    <option value="10">10</option>
    <option value="11">11</option>
    <option value="12">12</option>
    <option value="13">13</option>
    <option value="14">14</option>
    <option value="15">15</option>
    <option value="16">16</option>
    <option value="17">17</option>
    <option value="18">18</option>
    <option value="19">19</option>
    <option value="20">20</option>
    <option value="21">21</option>
    <option value="22">22</option>
    <option value="23">23</option>
    <option value="24">24</option>
    <option value="25">25</option>
    <option value="26">26</option>
    <option value="27">27</option>
    <option value="28">28</option>
    <option value="29">29</option>
    <option value="30">30</option>
    <option value="31">31</option>
  </select>

script#new_reminder_template(type = 'text/ractive')
  .form-horizontal#new_reminder
    .row
      .col-sm-2.col-md-offset-2
        span.required_before
          | {{ t.required }}
    .form-group#reminder_type(class = '{{#reminder_type_error}}has-error{{/}}')
      label.control-label.col-sm-2.required
        | {{ t.type }}
      .col-sm-10
        | {{> select_type }}
        span.help-block
          | {{ t.reminder_type_error_message }}
    .form-group
      label.control-label.col-sm-2
        | {{ t.start_date }}
      .col-sm-10
        | {{> select_year }}
        | {{> select_month }}
        | {{> select_day }}
    .form-group#text(class = '{{#text_error}}has-error{{/}}')
      label.control-label.topaligned.col-sm-2.required
        | {{ t.text }}
      .col-sm-10
        textarea.form-control#reminder_text(style="width:70%" name="reminder[text]" cols="78" rows="4" value='{{text}}' on-keydown="@this.remove_errors('text')")
        span.help-block
          | {{ t.reminder_text_error_message }}
    .form-group#recipient(class = '{{#user_id_error}}has-error{{/}}')
      label.control-label.topaligned.col-sm-2.required
        | {{ t.recipient }}
      .col-sm-10
        | {{> select_user }}
        span.help-block
          | {{ t.reminder_recipient_error_message }}
    .form-group
      .col-sm-3.col-sm-offset-3(style = "text-align:center;")
        .btn.btn-danger.btn-sm#cancel_reminder(on-click = "@this.cancel_reminder()")
          i.fa.fa-remove.fa-lg(style = "color:white")
          span(style = "color:white")
            | {{ t.cancel }}
      .col-sm-3(style = "text-align:center;")
        .btn.btn-success.btn-sm#save_reminder(style = "color:white;", "on-click" = "@this.save_reminder()")
          i.fa.fa-check.fa-lg(style = "color:white")
          span
            | {{ t.save }}

#reminder

script.
  import ConfirmDeleteModal from '../javascript/confirm_delete_modal'
  import InpageEdit from '../assets/javascripts/in_page_edit.coffee'
  import I18n from './reminders_translations.js'

  const PopoverEdit = function(node,id){
    const ractive = this;
    this.edit = new InpageEdit({
      on : node,
      object : this,
      focus_element : 'input.title',
      success(response, textStatus, jqXhr){
        this.options.object.set(response);
        return this.load();
      },
      error() {
        return console.log("Changes were not saved, for some reason");
      }
    });
    return {
      teardown(id){},
      update(id){}
      };
  };

  Ractive.decorators.popover_edit = PopoverEdit;

  export default Ractive.extend({
    template : $TEMPLATE,
    data(){
      return {
        t : I18n.t('reminders.reminder')
      }
    },
    computed : {
      persisted() {
        return !isNaN(parseInt(this.get('id')));
      },
      delete_confirmation_message() {
        return `${t('.confirm_delete')}`;
      }
    },
    save_reminder() {
      const url = this.parent.get('create_reminder_url');
      const data = $(this.find('#new_reminder')).find(':input').serializeArray();
      if (this.validate(data)) {
        return $.ajax({
          type : 'post',
          url,
          data,
          dataType : 'json',
          success : this.create_reminder,
          context : this
        });
      }
    },
    cancel_reminder() {
      return this.parent.pop('reminders');
    },
    delete_callback(response, statusText, jqxhr){
      this.parent.set('reminders',response); // the global reminders
      return this.get('parent').set('reminders',response);
    }, // the parent object
    validate() {
      const type = this._validate('reminder_type');
      const text = this._validate('text');
      const user_id = this._validate('user_id');
      return type && text && user_id;
    },
    _validate(field){
      if (_.isString(this.get(field))) {
        this.set(field, this.get(field).trim());
      }
      const value = this.get(field);
      if (_.isArray(value) && (value.length === 0)) {
        this.set(field+'_error',true);
        return false;
      } else if ((value === "") || _.isNull(value)) {
        this.set(field+'_error',true);
        return false;
      } else {
        return true;
      }
    },
    create_reminder(response, statusText, jqxhr){
      this.parent.set('reminders',response); // the global reminders
      return this.get('parent').set('reminders',response);
    }, // the parent object
    remove_errors(field){
      if (_.isUndefined(field)) { // after edit, failed save, and cancel, remove all errors
        const error_attrs = _(_(this.get()).keys()).select(k=> k.match(/error/));
        return _(error_attrs).each(a=> this.set(a,false));
      } else { // user types into input or changes select
        return this.set(field+"_error",false);
      }
    },
    terminate_edit() {
      const el = this.find('*');
      if (this.editor) {
        return this.editor.edit_cancel($(el));
      }
    }
  }).extend(ConfirmDeleteModal);
