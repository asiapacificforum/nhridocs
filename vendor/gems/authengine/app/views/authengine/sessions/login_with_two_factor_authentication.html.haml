- focus('login')
- scope = 'authengine.sessions.new'
= message_block
- unless logged_in?
  %h1=t('heading', :scope => scope)
  =form_tag authengine_sessions_path do
    %table.table{:style => 'width:300px'}
      %tr
        %td= label_tag :login, t("user_name", :scope => scope)
        %td=text_field_tag "login"
      %tr
        %td= label_tag :password, t("password", :scope => scope)
        %td
          =password_field_tag "password"
          =hidden_field_tag :u2f_sign_response
      %tr
        %td
          .btn.btn-default.btn-primary#sign_up{:onclick=>'send_user_params()'}=t('login', :scope => scope)
        %td

- if Rails.env.production?
  = javascript_include_tag 'u2f-api.js'

- unless Rails.env.production?
  // cannot use yubikey in development as it requires https
  // also for test env, https not available and user presence detection not possible
  // so mock the token
  = javascript_include_tag 'jsrsasign/jsrsasign-4.7.0-all-min.js'
  = javascript_include_tag 'mock_yubikey'

:coffeescript
  $ ->
    remove_flash= ->
      $('.message_block').empty()
    $('#login').on('keydown',remove_flash)
    $('#password').on('keydown',remove_flash)

  production_env = #{Rails.env.production?}

  @send_user_params = ->
    @authentication_pending = 1 # it's used as a flag in the test suite
    $.post
      url : "#{authengine_sessions_path}"
      data : $('form').serialize()
      success : u2f_challenge
      error : u2f_challenge_fail

  u2f_challenge_fail = (jqxhr, status, message)->
    $('.message_block').append("<ul class='error'><li>"+jqxhr.responseText+"</li></ul>")

  opt_timeout_seconds = 15

  u2f_challenge = (signRequest, status, jqxhr)->
    # TODO harmonize the mock_yubikey u2f_sign arguments with the u2f_api.js arguments
    # and eliminate the conditional here
    if production_env
      appId = signRequest.appId
      challenge = signRequest.challenge
      registeredKeys = [{keyHandle : signRequest.keyHandle, version : signRequest.version}]
      u2f.sign(appId, challenge, registeredKeys, signRequestCallback, opt_timeout_seconds)
    else
      u2f.sign([signRequest], signRequestCallback, opt_timeout_seconds)

  signRequestCallback = (signResponse)->
    $('#u2f_sign_response').val(JSON.stringify(signResponse))
    @authentication_pending = 0
    $('form').submit()
