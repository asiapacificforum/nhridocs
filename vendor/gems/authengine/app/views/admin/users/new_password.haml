= message_block :for => :user
%h1= t('.heading', :name => @user.first_last_name)
= form_for :user, :url => admin_change_password_path(@user.password_reset_code), :method=>:post, :html => {:class => "form-horizontal", :id => :password_reset_form} do |f| 
  .user_info.form-horizontal
    .form-group
      .col-sm-3.control-label{:for => :password}=t('.password')
      .col-sm-4
        = f.password_field :password, :class => 'form-control'
    .form-group
      .col-sm-3.control-label{:for => :password_confirmation}=t('.password_confirmation')
      .col-sm-4
        = f.password_field :password_confirmation, :class => 'form-control'
    .form-group
      = hidden_field_tag "user[u2f_sign_response]"
    .row
      .col-sm-2
        .btn.btn-default.btn-primary#submit{:onclick=>'send_user_params()'}=t('defaults.submit')

- if Rails.env.production?
  = javascript_include_tag 'u2f-api.js'

- unless Rails.env.production?
  // cannot use yubikey in development as it requires https
  // also for test env, https not available and user presence detection not possible
  // so mock the token
  = javascript_include_tag 'jsrsasign/jsrsasign-4.7.0-all-min.js'
  = javascript_include_tag 'mock_yubikey'

:coffeescript
  $ ->
    remove_flash= ->
      $('.message_block').empty()
    $('#login').on('keydown',remove_flash)
    $('#password').on('keydown',remove_flash)

  production_env = #{Rails.env.production?}

  @send_user_params = ->
    @authentication_pending = 1 # it's used as a flag in the test suite
    $.get
      url : "#{authengine_challenge_request_path(@user.password_reset_code)}"
      data : $('form').serialize()
      success : u2f_challenge
      error : u2f_challenge_fail

  u2f_challenge_fail = (jqxhr, status, message)->
    $('.message_block').append("<ul class='error'><li>"+jqxhr.responseText+"</li></ul>")

  opt_timeout_seconds = 15

  u2f_challenge = (signRequest, status, jqxhr)->
    # TODO harmonize the mock_yubikey u2f_sign arguments with the u2f_api.js arguments
    # and eliminate the conditional here
    if production_env
      appId = signRequest.appId
      challenge = signRequest.challenge
      registeredKeys = [{keyHandle : signRequest.keyHandle, version : signRequest.version}]
      u2f.sign(appId, challenge, registeredKeys, signRequestCallback, opt_timeout_seconds)
    else
      u2f.sign([signRequest], signRequestCallback, opt_timeout_seconds)

  signRequestCallback = (signResponse)->
    $('#user_u2f_sign_response').val(JSON.stringify(signResponse))
    @authentication_pending = 0
    $('form').submit()
