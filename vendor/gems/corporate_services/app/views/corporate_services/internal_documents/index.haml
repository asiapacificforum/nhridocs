#message_block
%h1= t('.heading')
.container
  / The file upload form used as target for the file upload widget
  .fileupload{:'data-file-input' => '#primary_fileinput',
              :'data-url' => 'internal_documents.json',
              :'data-param-name' => 'internal_document[file]',
              :'data-upload-template-id' => '#primary_upload' }
    / The fileupload-buttonbar contains buttons to add/delete files and start/cancel the upload
    .row.fileupload-buttonbar
      .col-lg-7
        / The fileinput-button span is used to style the file input field as button
        %span.btn.btn-success.fileinput-button
          %i.fa.fa-plus.fa-lg{:style => "color:white"}
          %span= t('.add')
          %input#primary_fileinput{:multiple => "multiple", :name => "primary_file", :type => "file"}
        %button.btn.btn-primary.start{:type => "submit"}
          %i.fa.fa-cloud-upload.fa-lg{:style => "color:white"}
          %span= t('.start')
        %button.btn.btn-warning.cancel{:type => "reset"}
          %i.fa.fa-ban.fa-lg{:style => "color:white"}
          %span= t('.cancel')
        / The global file processing state
        %span.fileupload-process
      / The global progress state
      .col-lg-5.fileupload-progress.fade
        / The global progress bar
        .progress.progress-striped.active{"aria-valuemax" => "100", "aria-valuemin" => "0", :role => "progressbar"}
          .progress-bar.progress-bar-success{:style => "width:0%;"}
        / The extended global progress state
        .progress-extended Â 
    / The table listing the files available for upload/download
    .headings
      %table
        %tr
          %td{:style => "width:36%; text-align:left"} Document title
          %td{:style => "text-align:left"} Revision
          %td Information
          %td{:style => "width:16%"} Edit
          %td Download
          %td Archive
          %td Add file
          %td Delete
    #accordion.panel-group.files{:role => "tablist", :style => "width:830px", :name => 'internal_document[file]'}


    #accordion.panel-group.replace_files{:role => "tablist", :style => "width:830px", :name => 'internal_document[file]'}

= render :partial => 'details_popover'
= render :partial => 'details_popover_content'
= render :partial => 'details_popover_title'
= render :partial => 'template_upload', :locals => {:id => 'primary_upload', :prefix => 'internal_document', :label_prefix => 'internal_document'}
= render :partial => 'template_upload', :locals => {:id => 'archive_upload', :prefix => 'internal_document[archive_files][]', :label_prefix => 'internal_document_archive_files_'}
= render :partial => 'template_download'

= javascript_include_tag 'corporate_services/in_page_edit'
= javascript_include_tag 'corporate_services/popover'

:coffeescript
  $ ->
    $('.fileupload-buttonbar .start').on 'click', ->
      filesList = $('.files .template-upload, .replace_files .template-upload')
      # show flash msg if no files have been selected
      if filesList.length == 0
        $('#message_block').text("#{t('.flash.no_files_error')}")
      else
        $('#message_block').text("")

    $('.fileupload-buttonbar .fileinput-button, .fileupload-buttonbar .cancel, .fileupload-buttonbar .delete').on 'click', ->
      # remove any flash msg
      $('#message_block').text("")

    # download a file
    $('body').on 'click', '.download', (e)->
      $target = $(e.target)
      id = $target.closest('table.document').data('id')
      window.location = "#{corporate_services_internal_document_path('id')}".replace(/id/,id)

    $('.fileupload-buttonbar .fileinput-button').on 'click', '.fa-plus', (e)->
      $(@).parent().find('input:file').click()
    $('.fileupload-buttonbar .fileinput-button').on 'click', 'span', (e)->
      $(@).parent().find('input:file').click()

:coffeescript
  files = #{ render :partial => 'files', :formats => [:json], :locals => {:internal_documents => @internal_documents} }

  $ ->
    'use strict'

    #   INITIALIZE THE FILE LIST FROM JSON DATA AT DOCUMENT LOAD
    _.templateSettings = {
      interpolate: /\{\%=(.+?)\%\}/g
      evaluate: /\{\%(.+?)\%\}/g
      escape: /\{\%-(.+?)\%\}/g
    }
    template = _.template($('#template-download').html())
    result = template({files: files})
    $(result)[ 'appendTo' ]($('.files'))

    attach_fileupload_to = (element)->
      $(element).fileupload
        # TODO move these ruby interpolations out of coffeescript and into javascript, for better performance
        acceptFileTypes: new RegExp("\\.(#{InternalDocument::AcceptFileTypes.join('|')})$",'i'),
        maxFileSize: parseInt("#{InternalDocument::MaxFileSize}"),
        replaced: (e,data)->
          console.log "replaced"
          data.new_context.find('.fileupload').each ->
            attach_file_upload_to(@)
        #completed: ->
          #console.log "completed"
        finished: (e,data)->
          if data.errorThrown != 'abort'
            attach_fileupload_to data.context.find('.file_replace')
            #$('input:file').each (i,e)->
              #console.log($._data(e,'events').change[0].namespace)
        #done: (e,data)->
          #console.log "done"
        failed: (e,data)->
          if data.errorThrown != 'abort'
            alert("The upload failed for some reason")
        prependFiles : false
        filesContainer: '.files'
        formData: ->
          inputs = @.context.find(':input')
          arr = inputs.serializeArray()
          return arr
        downloadTemplateId: '#template-download'


    # Initialize the jQuery File Upload widget
    # from the InternalDocument class attributes
    # set in the model
    $('.fileupload').each ->
      $(@).fileupload
        # TODO move these ruby interpolations out of coffeescript and into javascript, for better performance
        acceptFileTypes: new RegExp("\\.(#{InternalDocument::AcceptFileTypes.join('|')})$",'i'),
        maxFileSize: parseInt("#{InternalDocument::MaxFileSize}"),
        replaced: (e,data)->
          console.log "replaced"
          data.new_context.find('.fileupload').each ->
            attach_fileupload_to(@)
        #completed: ->
          #console.log "completed"
        finished: (e,data)->
          if data.errorThrown != 'abort'
            attach_fileupload_to data.context.find('.fileupload')
            #$('input:file').each (i,e)->
              #console.log($._data(e,'events').change[0].namespace)
        #done: (e,data)->
          #console.log "done"
        failed: (e,data)->
          if data.errorThrown != 'abort'
            alert("The upload failed for some reason")
        prependFiles : false
        filesContainer: '.files'
        formData: ->
          inputs = @.context.find(':input')
          arr = inputs.serializeArray()
          return arr
        downloadTemplateId: '#template-download'



    # this is a hack to workaround a jquery-fileupload-ui bug
    # that causes multiple delete requests, due to multiple event
    # handlers being attached
    $('.files').on 'click', '.delete', (event)->
      ev = $.Event(event)
      context = $(event.target).closest('table.document')
      data = $(event.target).closest('.fileupload').data()
      $(this).
        closest('.fileupload').
        fileupload('option','destroy')( ev, $.extend({
                                                    context: context,
                                                    type: 'DELETE'
                                                }, data))
