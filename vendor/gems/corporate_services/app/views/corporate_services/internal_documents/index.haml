#message_block
%h1= t('.heading')
.container
  / The file upload form used as target for the file upload widget
  = form_for [:corporate_services, @internal_document], :html => {:enctype => "multipart/form-data", :id => :fileupload}, :method => :post do |form|
    / The fileupload-buttonbar contains buttons to add/delete files and start/cancel the upload
    .row.fileupload-buttonbar
      .col-lg-7
        / The fileinput-button span is used to style the file input field as button
        %span.btn.btn-success.fileinput-button
          %i.glyphicon.glyphicon-plus
          %span= t('.add')
          %input{:multiple => "multiple", :name => "file", :type => "file"}/
        %button.btn.btn-primary.start{:type => "submit"}
          %i.glyphicon.glyphicon-upload
          %span= t('.start')
        %button.btn.btn-warning.cancel{:type => "reset"}
          %i.glyphicon.glyphicon-ban-circle
          %span= t('.cancel')
        %button.btn.btn-danger.delete{:type => "button"}
          %i.glyphicon.glyphicon-trash
          %span= t('.delete')
        %input.toggle{:type => "checkbox"}/
        / The global file processing state
        %span.fileupload-process
      / The global progress state
      .col-lg-5.fileupload-progress.fade
        / The global progress bar
        .progress.progress-striped.active{"aria-valuemax" => "100", "aria-valuemin" => "0", :role => "progressbar"}
          .progress-bar.progress-bar-success{:style => "width:0%;"}
        / The extended global progress state
        .progress-extended Â 
    / The table listing the files available for upload/download
    %table.table.table-striped{:role => "presentation", :style => "width:600px"}
      %tbody.files{:name => 'internal_document[file]'}

= render :partial => 'details_popover'
= render :partial => 'details_popover_content'
= render :partial => 'details_popover_title'
= render :partial => 'upload_template'
= render :partial => 'template_download'

:coffeescript
  $ ->
    $('.fileupload-buttonbar .start').on 'click', ->
      filesList = $('.files .template-upload')
      # show flash msg if no files have been selected
      if filesList.length == 0
        $('#message_block').text("#{t('.flash.no_files_error')}")
      else
        $('#message_block').text("")

    $('.fileupload-buttonbar .fileinput-button, .fileupload-buttonbar .cancel, .fileupload-buttonbar .delete').on 'click', ->
      # remove any flash msg
      $('#message_block').text("")
      # return false

:coffeescript
    ##############
    # IN-PAGE EDIT
    ##############
  $ ->
    # remove the text spans and add in the input fields, for in-page editing
    $('body').on 'click', '.template-download div.no_edit .glyphicon-edit', ->
      context = $(@).closest('.template-download')
      edit_toggle = context.find("[data-toggle='edit']")
      edit_toggle.each (i,el) ->
        $el = $(el)
        edit = $el.find('.edit')
        no_edit = $el.find('.no_edit')
        no_edit.css("opacity",0).css("z-index",9)
        input = $el.find('.edit input')
        input_val = input.data('value')
        $el.find('.edit input').val(input_val)
        edit.css("opacity",1).css("z-index",10)

      # set the edit inputs wide enough for the contents
      $('.title .edit input').css 'width', ->
        $('.title .no_edit span').width() + 10
      revisionSpanWidth = $('td.revision .no_edit div').width()
      $('td.revision .edit input').css 'width', revisionSpanWidth + 10

      # ensure the revision td is large enough, in case no rev is set
      $('td.revision').css 'width', revisionSpanWidth + 30
      $(@).closest('.template-download').find('input.title').focus()

    # bring in the text spans and remove the input fields
    $('body').on 'click', '.template-download div.edit .glyphicon-remove', ->
      context = $(@).closest('.template-download')
      edit_toggle = context.find("[data-toggle='edit']")
      edit_toggle.each (i,el) ->
        $el = $(el)
        edit = $el.find('.edit')
        no_edit = $el.find('.no_edit')
        no_edit.css("opacity",1).css('z-index',10)
        input = $el.find('.edit input')
        input_val = input.data('value')
        $el.find('.edit input').val(input_val)
        edit.css("opacity",0).css('z-index',9)

    # send changes to the server via ajax
    $('body').on 'click', ".glyphicon-ok", (e)->
      $el = $(e.target)
      data = {'_method':'put'}
      id = $el.closest('.template-download').data('id')
      url = "#{corporate_services_internal_document_path('id')}".replace(/id/,id)
      data['internal_document'] = {}
      data['internal_document']['title'] = $el.closest('.template-download').find('.edit .title').val()
      data['internal_document']['revision'] = $el.closest('.template-download').find('.edit .revision').val()
      $.post(url, data, (response, text, jqXhr)->
        id = response.id
        alert 'success'
        ).fail ->
        alert 'fail'

:coffeescript
  files = #{@internal_documents.map(&:presentation_attributes).to_json}

  $ ->
    'use strict'

    # Initialize the jQuery File Upload widget
    # from the InternalDocument class attributes
    # set in its initializer
    $('#fileupload').fileupload
        url: 'internal_documents',
        paramName: 'internal_document[file]',
        acceptFileTypes: new RegExp("\\.(#{InternalDocument.acceptFileTypes.join('|')})$",'i'),
        maxFileSize: parseInt("#{InternalDocument.maxFileSize}"),
        # completed: function(e,data){},
        # finished: function(){} // another callback that's available
        prependFiles : false


    #   INITIALIZE THE FILE LIST FROM JSON DATA AT DOCUMENT LOAD
    result = tmpl($('#template-download').html(),{files: files})
    $(result)[ 'appendTo' ]($('.files'))


:coffeescript
  $ ->
    # configure the "information" popover for the files
    $("body").popover
      selector : '.details',
      html : true,
      title : ->
        $('#detailsTitle').html() # in the partial, above
      content : ->
        data = $(@).closest('.template-download').data() # in the partial, above
        tmpl('detailsContent', data) # in the partial, above
      template : $('#popover_template').html() # in the partial, above

    # click on the 'x' close icon in the popover to close it
    $('body').on 'click', '.closepopover', ->
      $(@).closest('.template-download').find('.details').popover('hide')

    # click anywhere to close the popover
    $('html').on 'click', (e)->
      target_class = $(e.target).attr('class')
      if typeof(target_class) == "undefined" or !(target_class.match(/glyphicon-info-sign/) or target_class.match(/glyphicon-remove/))
        $('.details').popover('hide')

