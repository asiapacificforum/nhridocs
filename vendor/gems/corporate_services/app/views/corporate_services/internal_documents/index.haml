%h1= t('.heading')
.container
  / The file upload form used as target for the file upload widget
  %form#fileupload{:action => "//jquery-file-upload.appspot.com/", :enctype => "multipart/form-data", :method => "POST"}
    / Redirect browsers with JavaScript disabled to the origin page
    %noscript
      %input{:name => "redirect", :type => "hidden", :value => "https://blueimp.github.io/jQuery-File-Upload/"}/
    / The fileupload-buttonbar contains buttons to add/delete files and start/cancel the upload
    .row.fileupload-buttonbar
      .col-lg-7
        / The fileinput-button span is used to style the file input field as button
        %span.btn.btn-success.fileinput-button
          %i.glyphicon.glyphicon-plus
          %span= t('.add')
          %input{:multiple => "multiple", :name => "files[]", :type => "file"}/
        %button.btn.btn-primary.start{:type => "submit"}
          %i.glyphicon.glyphicon-upload
          %span= t('.start')
        %button.btn.btn-warning.cancel{:type => "reset"}
          %i.glyphicon.glyphicon-ban-circle
          %span= t('.cancel')
        %button.btn.btn-danger.delete{:type => "button"}
          %i.glyphicon.glyphicon-trash
          %span= t('.delete')
        %input.toggle{:type => "checkbox"}/
        / The global file processing state
        %span.fileupload-process
      / The global progress state
      .col-lg-5.fileupload-progress.fade
        / The global progress bar
        .progress.progress-striped.active{"aria-valuemax" => "100", "aria-valuemin" => "0", :role => "progressbar"}
          .progress-bar.progress-bar-success{:style => "width:0%;"}
        / The extended global progress state
        .progress-extended Â 
    / The table listing the files available for upload/download
    %table.table.table-striped{:role => "presentation"}
      %tbody.files
/ The template to display files available for upload
%script#template-upload{:type => 'text/x-tmpl'}
  {% for (var i=0, file; file=o.files[i]; i++) { %}
  %tr.template-upload.fade
    %td
      %span.preview
    %td
      %p.name {%= file.name %}
      %strong.error.text-danger
    %td.title
      = label_tag :docname, 'Document name'
      = text_field_tag 'docname[]', '',:required => true
    %td
      %p.size= t('.processing')
      %div.progress.progress-striped.active{:role => 'progressbar', :aria_valuemin => '0', :aria_valuemax => '100', :aria_valuenow=>'0'}
        %div.progress-bar.progress-bar-success{:style => "width:0%"}
    %td
      {% if (!i && !o.options.autoUpload) { %}
      %button.btn.btn-primary.start{:disabled => true}
        %i.glyphicon.glyphicon-upload
        %span= t('.start_one')
      {% } %}
      {% if (!i) { %}
      %button.btn.btn-warning.cancel
        %i.glyphicon.glyphicon-ban-circle
        %span= t('.cancel_one')
      {% } %}
  {% } %}
%script#template-download{:type => 'text/x-tmpl'}
  {% for (var i=0, file; file=o.files[i]; i++) { %}
  %tr.template-download.fade
    %td
      %span.preview
        {% if (file.thumbnailUrl) { %}
        %a{:href=>"{%=file.url%}", :title=>"{%=file.name%}", :download=>"{%=file.name%}", :data_gallery => true}
          %img{:src=>"{%=file.thumbnailUrl%}"}
        {% } %}
    %td
      %p.name
      {% if (file.url) { %}

      {% if (file.thumbnailUrl) { %}
      %a{:href=>"{%=file.url%}", :title=>"{%=file.name%}", :download=>"{%=file.name%}", :data_gallery=>"true"}
        {%=file.name%}
      {% } else { %}
      %a{:href=>"{%=file.url%}", :title=>"{%=file.name%}", :download=>"{%=file.name%}"}
        {%=file.name%}
      {% } %}

      {% } else { %}
      %span {%= file.name %}
      {% } %}

      {% if (file.error ) { %}
      %div
        %span.label.label-danger
          = t('.error')
          {%= file.error %}
      {% } %}
    %td
      %span.size {%= o.formatFileSize(file.size) %}
    %td
      {% if (file.deleteUrl) { %}
      {% if (file.deleteWithCredentials) { %}
      %button.btn.btn-danger.delete{:data_type=>"{%=file.deleteType%}", :data_url=>"{%=file.deleteUrl%}", :data_xhr_fields=>'{"withCredentials":true}'}
        %i.glyphicon.glyphicon-trash
        %span= t('.delete')
      {% } else { %}
      %button.btn.btn-danger.delete{:data_type=>"{%=file.deleteType%}", :data_url=>"{%=file.deleteUrl%}"}
        %i.glyphicon.glyphicon-trash
        %span= t('.delete')
      {% } %}
      %input.toggle{:type => "checkbox", :name => "delete", :value => "1"}
      {% } else { %}
      %button.btn.btn-warning.cancel
        %i.glyphicon.glyphicon-ban-circle
        %span= t('.cancel_one')
      {% } %}
  {% } %}
