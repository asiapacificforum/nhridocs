%h1= t('.heading')
/ The fileinput-button span is used to style the file input field as button
-#%span.btn.btn-success.fileinput-button
  -#%i.glyphicon.glyphicon-plus
  -#%span Add files...
  -#/ The file input field used as target for the file upload widget
  -#%input#fileupload{:multiple => "multiple", :name => "files[]", :type => "file"}/
/ The file upload form used as target for the file upload widget
%form#fileupload{:action => "internal_documents", :enctype => "multipart/form-data", :method => "POST"}
  / The fileupload-buttonbar contains buttons to add/delete files and start/cancel the upload
  .row.fileupload-buttonbar
    .col-lg-7
      / The fileinput-button span is used to style the file input field as button
      %span.btn.btn-success.fileinput-button
        %i.glyphicon.glyphicon-plus
        %span Add files...
        %input{:multiple => "multiple", :name => "files[]", :type => "file"}/
      %button.btn.btn-primary.start{:type => "submit"}
        %i.glyphicon.glyphicon-upload
        %span Start upload
      %button.btn.btn-warning.cancel{:type => "reset"}
        %i.glyphicon.glyphicon-ban-circle
        %span Cancel upload
      %button.btn.btn-danger.delete{:type => "button"}
        %i.glyphicon.glyphicon-trash
        %span Delete
      %input.toggle{:type => "checkbox"}/
      / The global file processing state
      %span.fileupload-process
    / The global progress state
    .col-lg-5.fileupload-progress.fade
      / The global progress bar
      .progress.progress-striped.active{"aria-valuemax" => "100", "aria-valuemin" => "0", :role => "progressbar"}
        .progress-bar.progress-bar-success{:style => "width:0%;"}
      / The extended global progress state
      .progress-extended Â 
%br/
%br/
/ The global progress bar
#progress.progress
  .progress-bar.progress-bar-success
/ The container for the uploaded files
#files.files
%br/
:javascript
/*jslint unparam: true, regexp: true */
/*global window, $ */
-#$(function () {
    -#'use strict';
    -#// Change this to the location of your server-side upload handler:
    -#var url = 'internal_documents',
        -#uploadButton = $('<button/>')
            -#.addClass('btn btn-primary')
            -#.prop('disabled', true)
            -#.text('Processing...')
            -#.on('click', function () {
                -#var $this = $(this),
                    -#data = $this.data();
                -#$this
                    -#.off('click')
                    -#.text('Abort')
                    -#.on('click', function () {
                        -#$this.remove();
                        -#data.abort();
                    -#});
                -#data.submit().always(function () {
                    -#$this.remove();
                -#});
            -#});
    -#$('#fileupload').fileupload({
        -#url: url,
        -#dataType: 'json',
        -#autoUpload: false,
        -#//acceptFileTypes: /(\.|\/)(gif|jpe?g|png)$/i,
        -#acceptFileTypes: /(\.|\/)(pdf|doc?x)$/i,
        -#maxFileSize: 5000000, // 5 MB
        -#// Enable image resizing, except for Android and Opera,
        -#// which actually support image resizing, but fail to
        -#// send Blob objects via XHR requests:
        -#disableImageResize: true,
        -#previewMaxWidth: 100,
        -#previewMaxHeight: 100,
        -#previewCrop: true
    -#}).on('fileuploadadd', function (e, data) {
        -#data.context = $('<div/>').appendTo('#files');
        -#$.each(data.files, function (index, file) {
            -#var node = $('<p/>')
                    -#.append($('<span/>').text(file.name));
            -#if (!index) {
                -#node
                    -#.append('<br>')
                    -#.append(uploadButton.clone(true).data(data));
            -#}
            -#node.appendTo(data.context);
        -#});
    -#}).on('fileuploadprocessalways', function (e, data) {
        -#var index = data.index,
            -#file = data.files[index],
            -#node = $(data.context.children()[index]);
        -#if (file.preview) {
            -#node
                -#.prepend('<br>')
                -#.prepend(file.preview);
        -#}
        -#if (file.error) {
            -#node
                -#.append('<br>')
                -#.append($('<span class="text-danger"/>').text(file.error));
        -#}
        -#if (index + 1 === data.files.length) {
            -#data.context.find('button')
                -#.text('Upload')
                -#.prop('disabled', !!data.files.error);
        -#}
    -#}).on('fileuploadprogressall', function (e, data) {
        -#var progress = parseInt(data.loaded / data.total * 100, 10);
        -#$('#progress .progress-bar').css(
            -#'width',
            -#progress + '%'
        -#);
    -#}).on('fileuploaddone', function (e, data) {
        -#$.each(data.result.files, function (index, file) {
            -#if (file.url) {
                -#var link = $('<a>')
                    -#.attr('target', '_blank')
                    -#.prop('href', file.url);
                -#$(data.context.children()[index])
                    -#.wrap(link);
            -#} else if (file.error) {
                -#var error = $('<span class="text-danger"/>').text(file.error);
                -#$(data.context.children()[index])
                    -#.append('<br>')
                    -#.append(error);
            -#}
        -#});
    -#}).on('fileuploadfail', function (e, data) {
        -#$.each(data.files, function (index) {
            -#var error = $('<span class="text-danger"/>').text('File upload failed.');
            -#$(data.context.children()[index])
                -#.append('<br>')
                -#.append(error);
        -#});
    -#}).prop('disabled', !$.support.fileInput)
        -#.parent().addClass($.support.fileInput ? undefined : 'disabled');
-#});
