#message_block
%h1= t('.heading')
.container
  / The file upload form used as target for the file upload widget
  #fileupload
    / The fileupload-buttonbar contains buttons to add/delete files and start/cancel the upload
    .row.fileupload-buttonbar
      .col-lg-7
        / The fileinput-button span is used to style the file input field as button
        %span.btn.btn-success.fileinput-button
          %i.glyphicon.glyphicon-plus
          %span= t('.add')
          %input#primary_fileinput{:multiple => "multiple", :name => "primary_file", :type => "file"}
        %button.btn.btn-primary.start{:type => "submit"}
          %i.glyphicon.glyphicon-upload
          %span= t('.start')
        %button.btn.btn-warning.cancel{:type => "reset"}
          %i.glyphicon.glyphicon-ban-circle
          %span= t('.cancel')
        / The global file processing state
        %span.fileupload-process
      / The global progress state
      .col-lg-5.fileupload-progress.fade
        / The global progress bar
        .progress.progress-striped.active{"aria-valuemax" => "100", "aria-valuemin" => "0", :role => "progressbar"}
          .progress-bar.progress-bar-success{:style => "width:0%;"}
        / The extended global progress state
        .progress-extended Â 
    / The table listing the files available for upload/download
    #accordion.panel-group.files{:role => "tablist", :style => "width:700px", :name => 'internal_document[file]'}


    #accordion.panel-group.replace_files{:role => "tablist", :style => "width:700px", :name => 'internal_document[file]'}

= render :partial => 'details_popover'
= render :partial => 'details_popover_content'
= render :partial => 'details_popover_title'
= render :partial => 'template_upload'
= render :partial => 'template_download'

= javascript_include_tag 'corporate_services/in_page_edit'
= javascript_include_tag 'corporate_services/popover'

:coffeescript
  $ ->
    $('.fileupload-buttonbar .start').on 'click', ->
      filesList = $('.files .template-upload')
      # show flash msg if no files have been selected
      if filesList.length == 0
        $('#message_block').text("#{t('.flash.no_files_error')}")
      else
        $('#message_block').text("")

    $('.fileupload-buttonbar .fileinput-button, .fileupload-buttonbar .cancel, .fileupload-buttonbar .delete').on 'click', ->
      # remove any flash msg
      $('#message_block').text("")

    # download a file
    $('body').on 'click', '.download', (e)->
      $target = $(e.target)
      id = $target.closest('table.document').data('id')
      window.location = "#{corporate_services_internal_document_path('id')}".replace(/id/,id)

    # cancel an upload
    $('body').on 'click', '.template-upload i.cancel', ->
      #TODO need to unbind too
      # or even better... see what jquery fileupload does to cancel
      $('.template-upload').remove()

    $('.fileupload-buttonbar .fileinput-button').on 'click', '.glyphicon-plus', (e)->
      $(@).parent().find('input:file').click()
    $('.fileupload-buttonbar .fileinput-button').on 'click', 'span', (e)->
      $(@).parent().find('input:file').click()

:coffeescript
  files = #{ render :partial => 'files', :formats => [:json], :locals => {:internal_documents => @internal_documents} }

  $ ->
    'use strict'

    #   INITIALIZE THE FILE LIST FROM JSON DATA AT DOCUMENT LOAD
    result = tmpl($('#template-download').html(),{files: files})
    $(result)[ 'appendTo' ]($('.files'))

    # Initialize the jQuery File Upload widget
    # from the InternalDocument class attributes
    # set in the model
    $('#fileupload').fileupload
        url: 'internal_documents.json',
        paramName: 'internal_document[file]',
        # TODO move these ruby interpolations out of coffeescript and into javascript, for better performance
        acceptFileTypes: new RegExp("\\.(#{InternalDocument::AcceptFileTypes.join('|')})$",'i'),
        maxFileSize: parseInt("#{InternalDocument::MaxFileSize}"),
        # finished: function(){} // another callback that's available
        # completed: function(){} // another callback that's available
        completed: ->
          #console.log "completed"
        finished: (e,data)->
          #console.log "finished"
          if data.errorThrown != 'abort'
            attach_fileupload_to data.context.find('.file_replace')
            #$('input:file').each (i,e)->
              #console.log($._data(e,'events').change[0].namespace)
        #done: (e,data)->
          #console.log "done"
        failed: (e,data)->
          if data.errorThrown != 'abort'
            alert("The update failed for some reason")
        prependFiles : false
        filesContainer: '.files'
        fileInput: '#primary_fileinput'
        formData: ->
          inputs = @.context.find(':input')
          arr = inputs.serializeArray()
          arr[arr.length] =  {name: "internal_document[primary]", value: true}
          return arr

    attach_fileupload_to = ($element)->
      id = $element.attr('id')
      $("#"+id).fileupload
          url: 'internal_documents/'+id.replace('upload','')
          paramName: 'internal_document[archive_files][][file]'
          # TODO move these ruby interpolations out of coffeescript and into javascript, for better performance
          acceptFileTypes: new RegExp("\\.(#{InternalDocument::AcceptFileTypes.join('|')})$",'i')
          maxFileSize: parseInt("#{InternalDocument::MaxFileSize}")
          # completed: function(e,data){}
          # finished: function(){} // another callback that's available
          prependFiles : false
          filesContainer: '.replace_files'
          fileInput: "#"+id+" #archive_fileinput"
          type: 'put' # updating the primary file by adding an archive file
          failed: (e,data)->
            if data.errorThrown != 'abort'
              console.log("update fail")
              console.dir(e)
              console.dir(data)
              #alert("The update failed for some reason")
          formData: ->
            inputs = @.context.find(':input')
            arr = inputs.serializeArray()
            o['name'] = o['name'].replace('internal_document','internal_document[archive_files][]') for o in arr
            arr[arr.length] =  {name: "internal_document[archive_files][][primary]", value: false}
            return arr

    $('.file_replace').each ->
      attach_fileupload_to($(@))
